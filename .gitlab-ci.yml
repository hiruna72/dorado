stages:
  - pre-flight
  - build
  - test
  - deploy

variables:
  BUILD_DIR: build
  GIT_SUBMODULE_STRATEGY: recursive
  CUDA: "11.7"
  WIN_CUDA_TOOLKIT: "/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v${CUDA}"

# Build stage components

.macos_runner: &macos_runner
  tags:
    - macos
    - m1

.linux_runner: &linux_runner
  tags:
    - linux
    - nvidia-docker

.linux_arm64_runner: &linux_arm64_runner
  tags:
    - nvidia-docker
    - linux-arm64-gpu

.windows_runner: &windows_runner
  tags:
    - win10-gpu

.linux_dependencies: &linux_dependencies
  before_script:
    - echo Dorado dependency stage
    - apt-get update && apt-get install -y --no-install-recommends curl libhdf5-dev libssl-dev libzstd-dev libsz2

.build_dorado: &build_dorado
  stage: build
  script:
    - echo Dorado build stage
    - cmake ${BUILD_OPTIONS} -S . -B ${BUILD_DIR}
    - cmake --build ${BUILD_DIR} --config Release --target install -j 8
    - ctest -C Release --test-dir ${BUILD_DIR} --output-on-failure
  artifacts:
    paths:
      - dist
    expire_in: 1 day

.build_dorado_archive: &build_dorado_archive
  stage: build
  script:
    - cmake ${BUILD_OPTIONS} -S . -B ${BUILD_DIR}
    - cmake --build ${BUILD_DIR} --config Release -j 8
    - cpack --config ${BUILD_DIR}/CPackConfig.cmake
  artifacts:
    paths:
      - archive
    expire_in: 1 day

.build_dorado_lib_only: &build_dorado_lib_only
  stage: build
  script:
    - cmake ${BUILD_OPTIONS} -S . -B ${BUILD_DIR} -DDORADO_LIB_ONLY=1
    - cmake --build ${BUILD_DIR} -j 8

# Pre-flight stages

pre-commit:
  image: ${DORADO_PRECOMMIT}
  stage: pre-flight
  script:
    - pip install pre-commit
    - pre-commit run --all-files
  <<: *linux_runner

# Build stages

build:linux:x86:focal:install_deps:
  image: ${DORADO_DOCKER_ROOT}/dorado-no-deps-20.04-cuda-${CUDA}.0:1.0
  <<: *linux_dependencies
  <<: *linux_runner
  <<: *build_dorado
  when: manual

build:linux:x86:focal:
  image: ${DORADO_DOCKER_ROOT}/dorado-deps-20.04-cuda-${CUDA}.0:1.0
  variables:
    BUILD_OPTIONS: "-DDORADO_LIBTORCH_DIR=/usr/local/libtorch -DBUILD_KOI_FROM_SOURCE=ON -DGITLAB_CI_TOKEN=${CI_JOB_TOKEN}"
  <<: *linux_runner
  <<: *build_dorado

build:linux:arm64:focal:
  image: nvcr.io/nvidia/l4t-pytorch:r35.1.0-pth1.13-py3
  variables:
    BUILD_OPTIONS: "-DDORADO_LIBTORCH_DIR=/usr/local/lib/python3.8/dist-packages/torch"
  <<: *linux_dependencies
  <<: *linux_arm64_runner
  <<: *build_dorado

build:linux:x86:focal_koi_download:
  image: ${DORADO_DOCKER_ROOT}/dorado-deps-20.04-cuda-${CUDA}.0:1.0
  variables:
    BUILD_OPTIONS: "-DDORADO_LIBTORCH_DIR=/usr/local/libtorch"
  <<: *linux_runner
  <<: *build_dorado

build:windows:
  <<: *windows_runner
  <<: *build_dorado
  before_script:
    - export PATH=${PATH}:${PWD}/dist/bin
    - export CUDA_TOOLKIT=$(cygpath -u $(cygpath -d "${WIN_CUDA_TOOLKIT}"))
    - export BUILD_OPTIONS="-A x64 -T cuda=${CUDA} -DCUDAToolkit_ROOT=${CUDA_TOOLKIT} -DBUILD_KOI_FROM_SOURCE=ON -DGITLAB_CI_TOKEN=${CI_JOB_TOKEN}"
    - echo BUILD_OPTIONS is ${BUILD_OPTIONS}

build:windows_koi_download:
  <<: *windows_runner
  <<: *build_dorado
  before_script:
    - export PATH=${PATH}:${PWD}/dist/bin
    - export CUDA_TOOLKIT=$(cygpath -u $(cygpath -d "${WIN_CUDA_TOOLKIT}"))
    - export BUILD_OPTIONS="-A x64 -T cuda=${CUDA} -DCUDAToolkit_ROOT=${CUDA_TOOLKIT}"
    - echo BUILD_OPTIONS is ${BUILD_OPTIONS}

build:macos:m1:
  variables:
  <<: *macos_runner
  <<: *build_dorado

build:ios:m1:
  variables:
    BUILD_OPTIONS: "-DCMAKE_TOOLCHAIN_FILE=cmake/ios-cmake/ios.toolchain.cmake -DPLATFORM=OS64 -DSKIP_HDF_PLUGINS=1 -DDEPLOYMENT_TARGET=16.0"
  <<: *macos_runner
  <<: *build_dorado_lib_only

build_archive:linux:x86:focal:
  image: ${DORADO_DOCKER_ROOT}/dorado-deps-20.04-cuda-${CUDA}.0:1.0
  variables:
    BUILD_OPTIONS: "-DDORADO_LIBTORCH_DIR=/usr/local/libtorch -DBUILD_KOI_FROM_SOURCE=ON -DGITLAB_CI_TOKEN=${CI_JOB_TOKEN}"
  <<: *linux_runner
  <<: *build_dorado_archive
  when: manual

build_archive:linux:x86:cuda12:
  image: nvcr.io/nvidia/pytorch:23.01-py3
  variables:
    BUILD_OPTIONS: "-DDORADO_LIBTORCH_DIR=/usr/local/lib/python3.8/dist-packages/torch"
  <<: *linux_dependencies
  <<: *linux_runner
  <<: *build_dorado_archive
  when: manual

build_archive:linux:arm64:focal:
  image: nvcr.io/nvidia/l4t-pytorch:r35.1.0-pth1.13-py3
  variables:
    BUILD_OPTIONS: "-DDORADO_LIBTORCH_DIR=/usr/local/lib/python3.8/dist-packages/torch"
  <<: *linux_dependencies
  <<: *linux_arm64_runner
  <<: *build_dorado_archive
  when: manual

build_archive:linux:x86:centos7:
  image: ${DORADO_DOCKER_ROOT}/dorado-deps-centos7-cuda-${CUDA}.0:1.0
  variables:
    BUILD_OPTIONS: "-DDORADO_LIBTORCH_DIR=/usr/local/libtorch -DBUILD_KOI_FROM_SOURCE=ON -DGITLAB_CI_TOKEN=${CI_JOB_TOKEN} -DOPENSSL_ROOT_DIR=/usr/lib64/openssl11/ -DOPENSSL_INCLUDE_DIR=/usr/include/openssl11 -DDORADO_USING_OLD_CPP_ABI=ON -DDYNAMIC_HDF=ON"
  <<: *linux_runner
  <<: *build_dorado_archive
  when: manual

build_archive:windows:
  before_script:
    - export CUDA_TOOLKIT=$(cygpath -u $(cygpath -d "${WIN_CUDA_TOOLKIT}"))
    - export BUILD_OPTIONS="-A x64 -T cuda=${CUDA} -DCUDAToolkit_ROOT=${CUDA_TOOLKIT} -DBUILD_KOI_FROM_SOURCE=ON -DGITLAB_CI_TOKEN=${CI_JOB_TOKEN}"
    - echo BUILD_OPTIONS is ${BUILD_OPTIONS}
  <<: *windows_runner
  <<: *build_dorado_archive
  when: manual

build_archive:macos:m1:
  variables:
  <<: *macos_runner
  <<: *build_dorado_archive
  when: manual

# Test stage components

.test_dorado: &test_dorado
  stage: test
  script:
    - echo Dorado app test stage
    - ./dist/bin/dorado download --model dna_r9.4.1_e8_hac@v3.3
    - ./dist/bin/dorado basecaller dna_r9.4.1_e8_hac@v3.3 ./tests/data/pod5 -r 1 -b 384 > calls.sam
    - ./dist/bin/dorado basecaller dna_r9.4.1_e8_hac@v3.3 ./tests/data/pod5 -r 1 -x cpu > calls.sam

.test_archive: &test_archive
  stage: test
  script:
    - tar -xzf archive/dorado-*.gz
    - ldd ./dorado-*/bin/dorado
    # We just want to check that dorado will run here, so simply display the verbose version info
    - ./dorado-*/bin/dorado -vv

# Test stages

test:linux:x86:focal:
  image: ${DORADO_DOCKER_ROOT}/dorado-deps-20.04-cuda-${CUDA}.0:1.0
  <<: *linux_runner
  <<: *test_dorado
  needs:
    - build:linux:x86:focal

test:linux:arm64:focal:
  image: nvcr.io/nvidia/l4t-pytorch:r35.1.0-pth1.13-py3
  <<: *linux_dependencies
  <<: *linux_arm64_runner
  <<: *test_dorado
  needs:
    - build:linux:arm64:focal

test:macos:m1:
  <<: *macos_runner
  <<: *test_dorado
  needs:
    - build:macos:m1

# Test that you can run dorado in a clean cuda 20.04 environment
test_archive:linux:x86:20.04_nvidia:
  image: nvidia/cuda:${CUDA}.0-devel-ubuntu20.04
  <<: *linux_runner
  <<: *test_archive
  needs:
    - build_archive:linux:x86:centos7

# Test that you can run dorado in a clean cpu 18.04 environment
test_archive:linux:x86:18.04:
  image: ubuntu:18.04
  <<: *linux_runner
  <<: *test_archive
  needs:
    - build_archive:linux:x86:centos7

# Test that you can run dorado in a clean cpu 20.04 environment
test_archive:linux:x86:20.04:
  image: ubuntu:20.04
  <<: *linux_runner
  <<: *test_archive
  needs:
    - build_archive:linux:x86:centos7

test_archive:linux:arm64:20.04:
  image: nvcr.io/nvidia/l4t-pytorch:r35.1.0-pth1.13-py3
  <<: *linux_dependencies
  <<: *linux_arm64_runner
  <<: *test_archive
  needs:
    - build_archive:linux:arm64:focal

# Single read eval

test:sre-test:
  stage: test
  when: manual
  image: ${TRIGGER_IMAGE}
  dependencies: []
  variables:
    GIT_STRATEGY: none
  script:
    - |
      curl -i --header "Content-Type: application/json" \
      --request POST \
      --data '{
          "key": "'${MLHUB_TRIGGER_KEY}'",
          "job_name": "Dorado SRE: '${CI_COMMIT_REF_NAME}' - '"$CI_COMMIT_TITLE"' ",
          "script_parameters": {
              "git_checkout":"'${CI_COMMIT_SHA}'",
              "branch_name":"'${CI_COMMIT_REF_NAME}'",
              "sre_output":"'${SRE_OUTPUT_ROOT}'/'${CI_COMMIT_SHA}'/",
              "models":["dna_r10.4.1_e8.2_400bps_fast@v4.1.0","dna_r10.4.1_e8.2_400bps_hac@v4.1.0","dna_r10.4.1_e8.2_400bps_sup@v4.1.0"]
          }
      }' \
      ${MLHUB_TRIGGER_URL}

# Deploy

deploy:all:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
   - ls -lh archive
  when: manual
  artifacts:
    paths:
      - archive
    expire_in: 1 day
  needs:
    - build_archive:linux:x86:centos7
    - build_archive:linux:arm64:focal
    - build_archive:macos:m1
    - build_archive:windows
