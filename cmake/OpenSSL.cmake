if(ECM_ENABLE_SANITIZERS)
  set(OPENSSL_USE_STATIC_LIBS FALSE)
else()
  set(OPENSSL_USE_STATIC_LIBS TRUE)
endif()

if(NOT DEFINED OPENSSL_ROOT_DIR)
    if(APPLE)
        if (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
            set(OPENSSL_ROOT_DIR "/usr/local/opt/openssl@3")
        else()
            set(OPENSSL_ROOT_DIR "/opt/homebrew/opt/openssl@3")
        endif()
    elseif(WIN32)
        download_and_extract(https://cdn.oxfordnanoportal.com/software/analysis/openssl3-win.zip openssl3-win)
        set(OPENSSL_ROOT_DIR ${DORADO_3RD_PARTY}/openssl3-win)
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
        if (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
            download_and_extract(https://cdn.oxfordnanoportal.com/software/analysis/openssl3-linux-x86_64.zip openssl3-Linux-x86_64)
            set(OPENSSL_ROOT_DIR ${DORADO_3RD_PARTY}/openssl3-Linux-x86_64)
        elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^aarch64*|^arm*")
            if(${CUDAToolkit_VERSION} VERSION_LESS 11.0)
                download_and_extract(https://cdn.oxfordnanoportal.com/software/analysis/openssl3-linux-aarch64-gcc7.zip openssl3-Linux-aarch64)           
            else()
                download_and_extract(https://cdn.oxfordnanoportal.com/software/analysis/openssl3-linux-aarch64.zip openssl3-Linux-aarch64)           
            endif()
            set(OPENSSL_ROOT_DIR ${DORADO_3RD_PARTY}/openssl3-Linux-aarch64)
        endif()
    endif()
else()
    message(STATUS "Using existing OpenSSL at ${OPENSSL_ROOT_DIR}")
endif()

set(CMAKE_PREFIX_PATH ${OPENSSL_ROOT_DIR} ${CMAKE_PREFIX_PATH}) # put the selected openssl path before any older imported one.

find_package(OpenSSL REQUIRED QUIET)
